{
  "stats": {
    "suites": 3,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2017-08-18T05:19:48.829Z",
    "end": "2017-08-18T05:19:51.854Z",
    "duration": 3025,
    "testsRegistered": 3,
    "passPercent": 66.7,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "/k/v1/record.json GET测试",
        "suites": [],
        "tests": [
          {
            "title": "获取data.js里指定App的值并验证",
            "fullTitle": "/k/v1/record.json GET测试 获取data.js里指定App的值并验证",
            "timedOut": false,
            "duration": 673,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    \"app\": app.app,\n    \"id\": app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')   //断言结果有 '天气' 字段\n    expect(res.body.record.天気.value).to.be.equal('雨'); //断言结果 '天气' 字段的值为 '晴れ'\n    expect(res.body.record).to.have.property('レコード番号')\n    expect(res.body.record.レコード番号.value).to.be.equal(app.id);\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    done(); //告诉mocha结束测试\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "ea15328e-a69e-4de4-bbd6-bd5dcea951b6",
            "parentUUID": "67b4aefe-472c-4fc8-b81b-d1f86e9beb9d",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\get.test.js",
        "uuid": "67b4aefe-472c-4fc8-b81b-d1f86e9beb9d",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "e:\\Progaram File\\Microsoft VS Code\\test\\Project\\kintone API\\record\\get.test.js",
        "passes": [
          {
            "title": "获取data.js里指定App的值并验证",
            "fullTitle": "/k/v1/record.json GET测试 获取data.js里指定App的值并验证",
            "timedOut": false,
            "duration": 673,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    \"app\": app.app,\n    \"id\": app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')   //断言结果有 '天气' 字段\n    expect(res.body.record.天気.value).to.be.equal('雨'); //断言结果 '天气' 字段的值为 '晴れ'\n    expect(res.body.record).to.have.property('レコード番号')\n    expect(res.body.record.レコード番号.value).to.be.equal(app.id);\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    done(); //告诉mocha结束测试\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "ea15328e-a69e-4de4-bbd6-bd5dcea951b6",
            "parentUUID": "67b4aefe-472c-4fc8-b81b-d1f86e9beb9d",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 673,
        "rootEmpty": false
      },
      {
        "title": "/k/v1/record.json POST测试",
        "suites": [],
        "tests": [
          {
            "title": "添加一条记录并验证值",
            "fullTitle": "/k/v1/record.json POST测试 添加一条记录并验证值",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': location\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('日付')\n    expect(res.body.record.日付.value).to.be.equal('2017-08-17');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('AAA');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('123456');\n    done(); //告诉mocha结束测试\n  })",
            "err": {
              "message": "AssertionError: expected '2017-08-18' to equal '2017-08-17'",
              "estack": "AssertionError: expected '2017-08-18' to equal '2017-08-17'\n    at Test.<anonymous> (post.test.js:42:48)\n    at Test.assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:179:6)\n    at assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:131:12)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:668:14)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:883:18\n    at Stream.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at Unzip.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\unzip.js:53:12)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- 2017-08-18\n+ 2017-08-17\n"
            },
            "isRoot": false,
            "uuid": "032b9e54-8efe-43d9-a700-fd35733724ff",
            "parentUUID": "e4529639-6b8c-44ae-af37-05d20105b234",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\post.test.js",
        "uuid": "e4529639-6b8c-44ae-af37-05d20105b234",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "/k/v1/record.json POST测试 \"before all\" hook",
            "timedOut": false,
            "duration": 603,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.post('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .set('Content-Type', 'application/json')\n  .send({\n    \"app\": app.app,\n    \"record\": {\n      \"売上\": { \"value\": \"123456\" },\n      \"天気\": { \"value\": \"雨\" },\n      \"引継ぎ事項\": { \"value\": \"AAA\" }\n    }\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    location = res.body.id;\n    done();\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "33f6d752-7561-4e00-8c31-7e156f63587a",
            "parentUUID": "e4529639-6b8c-44ae-af37-05d20105b234",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "e:\\Progaram File\\Microsoft VS Code\\test\\Project\\kintone API\\record\\post.test.js",
        "passes": [],
        "failures": [
          {
            "title": "添加一条记录并验证值",
            "fullTitle": "/k/v1/record.json POST测试 添加一条记录并验证值",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': location\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('日付')\n    expect(res.body.record.日付.value).to.be.equal('2017-08-17');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('AAA');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('123456');\n    done(); //告诉mocha结束测试\n  })",
            "err": {
              "message": "AssertionError: expected '2017-08-18' to equal '2017-08-17'",
              "estack": "AssertionError: expected '2017-08-18' to equal '2017-08-17'\n    at Test.<anonymous> (post.test.js:42:48)\n    at Test.assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:179:6)\n    at assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:131:12)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:668:14)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:883:18\n    at Stream.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at Unzip.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\unzip.js:53:12)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
              "diff": "- 2017-08-18\n+ 2017-08-17\n"
            },
            "isRoot": false,
            "uuid": "032b9e54-8efe-43d9-a700-fd35733724ff",
            "parentUUID": "e4529639-6b8c-44ae-af37-05d20105b234",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "/k/v1/record.json PUT测试",
        "suites": [],
        "tests": [
          {
            "title": "更新记录并验证结果",
            "fullTitle": "/k/v1/record.json PUT测试 更新记录并验证结果",
            "timedOut": false,
            "duration": 546,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    location = res.body.id;\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('BBB');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('1234567');\n    done(); //告诉mocha结束测试\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e404cac5-01da-4264-bbf0-9adcbf77c916",
            "parentUUID": "f0ab045f-1506-457e-9d5e-086415d8a612",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\put.test.js",
        "uuid": "f0ab045f-1506-457e-9d5e-086415d8a612",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "/k/v1/record.json PUT测试 \"before all\" hook",
            "timedOut": false,
            "duration": 651,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.put('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .set('Content-Type', 'application/json')\n  .send({\n    \"app\": app.app,\n    \"id\": app.id,\n    \"record\": {\n      \"売上\": { \"value\": \"1234567\" },\n      \"天気\": { \"value\": \"雨\" },\n      \"引継ぎ事項\": { \"value\": \"BBB\" },\n      \"日付\": { \"value:\": \"2017-08-17\" }\n    }\n  })\n  .expect(200)\n  .end(function (err, res) {\n    if (err) return done(err);\n    location = res.body;\n    done();\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "4e2608c7-b9e5-4bb9-9163-3d436851291b",
            "parentUUID": "f0ab045f-1506-457e-9d5e-086415d8a612",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "e:\\Progaram File\\Microsoft VS Code\\test\\Project\\kintone API\\record\\put.test.js",
        "passes": [
          {
            "title": "更新记录并验证结果",
            "fullTitle": "/k/v1/record.json PUT测试 更新记录并验证结果",
            "timedOut": false,
            "duration": 546,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    location = res.body.id;\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('BBB');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('1234567');\n    done(); //告诉mocha结束测试\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e404cac5-01da-4264-bbf0-9adcbf77c916",
            "parentUUID": "f0ab045f-1506-457e-9d5e-086415d8a612",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 546,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "cd585645-1915-4c13-b80f-55df96e642a6",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "获取data.js里指定App的值并验证",
      "fullTitle": "/k/v1/record.json GET测试 获取data.js里指定App的值并验证",
      "timedOut": false,
      "duration": 673,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    \"app\": app.app,\n    \"id\": app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')   //断言结果有 '天气' 字段\n    expect(res.body.record.天気.value).to.be.equal('雨'); //断言结果 '天气' 字段的值为 '晴れ'\n    expect(res.body.record).to.have.property('レコード番号')\n    expect(res.body.record.レコード番号.value).to.be.equal(app.id);\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    done(); //告诉mocha结束测试\n  })",
      "err": {},
      "isRoot": false,
      "uuid": "ea15328e-a69e-4de4-bbd6-bd5dcea951b6",
      "parentUUID": "67b4aefe-472c-4fc8-b81b-d1f86e9beb9d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "添加一条记录并验证值",
      "fullTitle": "/k/v1/record.json POST测试 添加一条记录并验证值",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': location\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('日付')\n    expect(res.body.record.日付.value).to.be.equal('2017-08-17');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('AAA');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('123456');\n    done(); //告诉mocha结束测试\n  })",
      "err": {
        "message": "AssertionError: expected '2017-08-18' to equal '2017-08-17'",
        "estack": "AssertionError: expected '2017-08-18' to equal '2017-08-17'\n    at Test.<anonymous> (post.test.js:42:48)\n    at Test.assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:179:6)\n    at assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:131:12)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:668:14)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:883:18\n    at Stream.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at Unzip.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\unzip.js:53:12)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- 2017-08-18\n+ 2017-08-17\n"
      },
      "isRoot": false,
      "uuid": "032b9e54-8efe-43d9-a700-fd35733724ff",
      "parentUUID": "e4529639-6b8c-44ae-af37-05d20105b234",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "更新记录并验证结果",
      "fullTitle": "/k/v1/record.json PUT测试 更新记录并验证结果",
      "timedOut": false,
      "duration": 546,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    location = res.body.id;\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('BBB');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('1234567');\n    done(); //告诉mocha结束测试\n  })",
      "err": {},
      "isRoot": false,
      "uuid": "e404cac5-01da-4264-bbf0-9adcbf77c916",
      "parentUUID": "f0ab045f-1506-457e-9d5e-086415d8a612",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "获取data.js里指定App的值并验证",
      "fullTitle": "/k/v1/record.json GET测试 获取data.js里指定App的值并验证",
      "timedOut": false,
      "duration": 673,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    \"app\": app.app,\n    \"id\": app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')   //断言结果有 '天气' 字段\n    expect(res.body.record.天気.value).to.be.equal('雨'); //断言结果 '天气' 字段的值为 '晴れ'\n    expect(res.body.record).to.have.property('レコード番号')\n    expect(res.body.record.レコード番号.value).to.be.equal(app.id);\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    done(); //告诉mocha结束测试\n  })",
      "err": {},
      "isRoot": false,
      "uuid": "ea15328e-a69e-4de4-bbd6-bd5dcea951b6",
      "parentUUID": "67b4aefe-472c-4fc8-b81b-d1f86e9beb9d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "更新记录并验证结果",
      "fullTitle": "/k/v1/record.json PUT测试 更新记录并验证结果",
      "timedOut": false,
      "duration": 546,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': app.id\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    location = res.body.id;\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('BBB');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('1234567');\n    done(); //告诉mocha结束测试\n  })",
      "err": {},
      "isRoot": false,
      "uuid": "e404cac5-01da-4264-bbf0-9adcbf77c916",
      "parentUUID": "f0ab045f-1506-457e-9d5e-086415d8a612",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "添加一条记录并验证值",
      "fullTitle": "/k/v1/record.json POST测试 添加一条记录并验证值",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api.get('')\n  .set('X-Cybozu-Authorization', 'Y3lib3p1OmN5Ym96dQ==')\n  .send({\n    'app': app.app,\n    'id': location\n  })\n  .expect(200) //返回值response为200\n  .end(function (err, res) {\n    if (err) return done(err);\n    expect(res.body.record).to.have.property('天気')\n    expect(res.body.record.天気.value).to.be.equal('雨');\n    expect(res.body.record).to.have.property('作成者')\n    expect(res.body.record.作成者.value.code).to.be.equal('cybozu');\n    expect(res.body.record).to.have.property('日付')\n    expect(res.body.record.日付.value).to.be.equal('2017-08-17');\n    expect(res.body.record).to.have.property('引継ぎ事項')\n    expect(res.body.record.引継ぎ事項.value).to.be.equal('AAA');\n    expect(res.body.record).to.have.property('売上')\n    expect(res.body.record.売上.value).to.be.equal('123456');\n    done(); //告诉mocha结束测试\n  })",
      "err": {
        "message": "AssertionError: expected '2017-08-18' to equal '2017-08-17'",
        "estack": "AssertionError: expected '2017-08-18' to equal '2017-08-17'\n    at Test.<anonymous> (post.test.js:42:48)\n    at Test.assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:179:6)\n    at assert (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:131:12)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:668:14)\n    at e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\index.js:883:18\n    at Stream.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at Unzip.<anonymous> (e:\\Progaram File\\Microsoft VS Code\\test\\node_modules\\superagent\\lib\\node\\unzip.js:53:12)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)",
        "diff": "- 2017-08-18\n+ 2017-08-17\n"
      },
      "isRoot": false,
      "uuid": "032b9e54-8efe-43d9-a700-fd35733724ff",
      "parentUUID": "e4529639-6b8c-44ae-af37-05d20105b234",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}